from collections.abc import Mapping
from typing import Any

class Redis:
    def __init__(
        self,
        host: str | None = ...,
        port: int | None = ...,
        db: int | None = ...,
        socket_connect_timeout: float | None = ...,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...
    @classmethod
    def from_url(cls, url: str, *args: Any, **kwargs: Any) -> Redis: ...
    def ping(self) -> bool: ...
    def get(self, name: str) -> bytes | None: ...
    def set(self, name: str, value: Any, *args: Any, **kwargs: Any) -> bool: ...
    def delete(self, *names: str) -> int: ...
    def hgetall(self, name: str) -> Mapping[bytes, bytes]: ...
    def close(self) -> None: ...

__all__ = ["Redis", "from_url"]

def from_url(url: str, *args: Any, **kwargs: Any) -> Redis: ...

class ConnectionError(Exception): ...
