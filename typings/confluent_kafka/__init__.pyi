from collections.abc import Iterable, Mapping
from typing import Any

class KafkaError(Exception):
    _PARTITION_EOF: int = ...

class KafkaException(Exception): ...

class Message:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def value(self) -> bytes | None: ...
    def key(self) -> bytes | None: ...
    def topic(self) -> str: ...
    def partition(self) -> int: ...
    def offset(self) -> int: ...
    def error(self) -> KafkaError | None: ...

class Consumer:
    def __init__(self, conf: Mapping[str, Any] | None = ..., *args: Any, **kwargs: Any) -> None: ...
    def subscribe(self, topics: Iterable[str], on_assign: Any | None = ...) -> None: ...
    def poll(self, timeout: float | None = ...) -> Message | None: ...
    def close(self) -> None: ...
    def commit(self, *args: Any, **kwargs: Any) -> Any: ...

class Producer:
    def __init__(self, conf: Mapping[str, Any] | None = ..., *args: Any, **kwargs: Any) -> None: ...
    def produce(
        self, topic: str, value: Any = ..., key: Any = ..., *args: Any, **kwargs: Any
    ) -> None: ...
    def flush(self, timeout: float | None = ...) -> None: ...

__all__ = ["Consumer", "Producer", "KafkaError", "KafkaException", "Message"]
