from collections.abc import Iterable
from typing import Any

class Session:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def add(self, instance: Any) -> None: ...
    def add_all(self, instances: Iterable[Any]) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def refresh(self, instance: Any, *args: Any, **kwargs: Any) -> None: ...
    def close(self) -> None: ...
    def execute(self, *args: Any, **kwargs: Any) -> Any: ...
    def query(self, *entities: Any, **kwargs: Any) -> Any: ...

def sessionmaker(*args: Any, **kwargs: Any) -> type[Session]: ...
def relationship(*args: Any, **kwargs: Any) -> Any: ...
def declarative_base(*args: Any, **kwargs: Any) -> Any: ...

class Query: ...

__all__ = ["Session", "sessionmaker", "relationship", "declarative_base", "Query"]
