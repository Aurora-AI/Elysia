name: Neo4j Pillars Check

'on':
  push:
    branches: [ feat/memory-adk-f1 ]
    paths:
      - "tools/neo4j_check_pillars.py"
      - ".github/workflows/neo4j-pillars-check.yml"
      - "**/neo4j/**"
      - "**/kg/**"
  pull_request:
    branches: [ feat/memory-adk-f1 ]
    paths:
      - "tools/neo4j_check_pillars.py"
      - ".github/workflows/neo4j-pillars-check.yml"
      - "**/neo4j/**"
      - "**/kg/**"

jobs:
  check-pillars:
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:5.22
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/testpass
          NEO4J_dbms_default__listen__address: 0.0.0.0
          NEO4J_dbms_default__advertised__address: localhost
          NEO4J_server_config_strict__validation_enabled: "false"
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (poetry or pip)
        run: |
          if [ -f pyproject.toml ]; then
            pip install poetry
            poetry config virtualenvs.create false
            poetry install --no-interaction --no-ansi
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install "neo4j>=5.22.0"
          fi

      - name: Wait for Neo4j health
        run: |
          for i in $(seq 1 60); do
            if curl -sS -u neo4j:testpass http://localhost:7474/ | grep -q "Neo4j"; then
              echo "Neo4j HTTP ready"; break
            fi
            echo "Waiting neo4j... ($i/60)"; sleep 2
          done

      - name: Create required constraints via HTTP Cypher
        env:
          NEO4J_URL: "http://localhost:7474"
          NEO4J_USER: "neo4j"
          NEO4J_PASSWORD: "testpass"
        run: |
          make_cypher() {
            printf '{"statements":[{"statement":"%s"}]}' "$1"
          }
          post_cypher() {
            curl -sS -u "${NEO4J_USER}:${NEO4J_PASSWORD}" \
              -H "Content-Type: application/json" \
              -d "$(make_cypher "$1")" \
              "${NEO4J_URL}/db/neo4j/tx/commit" | jq .
          }
          # Create UNIQUE constraints like our script expects
          post_cypher 'CREATE CONSTRAINT entity_id_unique IF NOT EXISTS FOR (n:Entity) REQUIRE n.id IS UNIQUE'
          post_cypher 'CREATE CONSTRAINT relation_id_unique IF NOT EXISTS FOR (n:Relation) REQUIRE n.id IS UNIQUE'

      - name: Run pillars check (non-strict)
        env:
          NEO4J_URI: "bolt://localhost:7687"
          NEO4J_USER: "neo4j"
          NEO4J_PASSWORD: "testpass"
        run: |
          python3 tools/neo4j_check_pillars.py

      - name: Run pillars check (strict) with relaxed index min
        env:
          NEO4J_URI: "bolt://localhost:7687"
          NEO4J_USER: "neo4j"
          NEO4J_PASSWORD: "testpass"
          NEO4J_MIN_INDEXES: "0"
          NEO4J_CHECK_STRICT: "true"
        run: |
          python3 tools/neo4j_check_pillars.py --strict
