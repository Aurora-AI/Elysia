name: Aurora CI/CD

'on':
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Linting e Análise Estática
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Instalar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Instalar Poetry
        run: |
          pip install poetry
      - name: Instalar dependências
        run: |
          poetry install --no-interaction --no-root
      - name: Rodar Ruff
        run: |
          poetry run ruff check .

  test:
    name: Testes Automatizados
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Instalar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Instalar Poetry
        run: |
          pip install poetry
      - name: Instalar dependências
        run: |
          poetry install --no-interaction --no-root
      - name: Set PYTHONPATH for monorepo
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/aurora-core/src" >> $GITHUB_ENV

      - name: Rodar Pytest
        run: |
          poetry run pytest -q

  security:
    name: Análise de Segurança
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Instalar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Instalar Poetry
        run: |
          pip install poetry
      - name: Instalar dependências
        run: |
          poetry install --no-interaction --no-root
      - name: Rodar Safety
        run: |
          pip install safety
          poetry export -f requirements.txt --without-hashes > requirements.txt
          safety check -r requirements.txt --full-report --output text | tee safety_report.txt
          if grep -E 'CRITICAL|HIGH' safety_report.txt; then exit 1; fi
