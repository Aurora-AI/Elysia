name: ci-crawler-js-e2e

on:
  workflow_dispatch:
  pull_request:
    branches: [main, develop]

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: JS E2E placeholder
        run: echo "JS E2E placeholder"
name: ci-crawler-smoke

on:
  workflow_dispatch:
  push:
    branches: [ops/**, feature/**]

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Crawler smoke placeholder
        run: echo "Crawler smoke OK"
name: ci-docparser-smoke

on:
  workflow_dispatch:
  push:
    branches: [ops/**, feature/**]

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docparser smoke placeholder
        run: echo "Docparser smoke OK"
name: ci

on:
  push:
    branches: [main, develop, ops/**, feature/**]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install base tooling
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev] || true
          pip install ruff pyright pytest pytest-cov requests

  guard-duplicates:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }
      - name: Guard duplicate roots
        run: |
          python tools/check_duplicate_packages.py

  lint-type:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }
      - name: Ruff
        run: ruff check .
      - name: Pyright
        run: pyright

  unit-tests:
    needs: [guard-duplicates, lint-type]
    runs-on: ubuntu-latest

    services:
      qdrant:
        image: qdrant/qdrant:v1.7.4
        ports: [ "6333:6333" ]
        options: >-
          --health-cmd="curl -fsS http://localhost:6333/ready || exit 1"
          --health-interval=5s --health-timeout=2s --health-retries=24

    env:
      QDRANT_URL: http://localhost:6333
      ENABLE_QDRANT_TESTS: "1"
      # Se quiser rodar os testes do crawler no CI, ligue:
      ENABLE_NET_TESTS: "0"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install requests

      - name: (Optional) Install Playwright browsers
        if: env.ENABLE_NET_TESTS == '1'
        run: |
          python -m pip install playwright
          python -m playwright install --with-deps chromium

      - name: Wait for Qdrant
        run: |
          for i in {1..60}; do curl -fsS http://localhost:6333/ready && exit 0 || sleep 1; done
          echo "Qdrant not ready" && exit 1

      - name: PyTest
        run: pytest -q --maxfail=1 --disable-warnings
name: e2e
on:
  workflow_dispatch:
  pull_request:
    types: [labeled]

jobs:
  e2e:
    if: github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'e2e')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run E2E placeholder
        run: echo "E2E placeholder - personalize conforme seus scripts"
name: hrm-smoke

on:
  workflow_dispatch:
  push:
    branches: [ops/**, feature/**]

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "HRM smoke OK"
name: mvp1-ingest

on:
  workflow_dispatch:

jobs:
  ingest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Dry-run ingest
        run: echo "Ingest pipeline placeholder"
name: ops-kg-health

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

permissions:
  contents: read

jobs:
  kg-health:
    runs-on: ubuntu-latest
    env:
      AURA_NEO4J_URI: ${{ secrets.AURA_NEO4J_URI }}
      AURA_NEO4J_USERNAME: ${{ secrets.AURA_NEO4J_USERNAME }}
      AURA_NEO4J_PASSWORD: ${{ secrets.AURA_NEO4J_PASSWORD }}
      QDRANT_URL: ${{ secrets.QDRANT_URL }}
      KAFKA_BROKER: ${{ secrets.KAFKA_BROKER }}
      SCHEMA_REGISTRY_URL: ${{ secrets.SCHEMA_REGISTRY_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Neo4j health
        run: |
          python - <<'PY'
          import os, sys
          uri = os.getenv("AURA_NEO4J_URI","")
          ok = bool(uri) and (uri.startswith(("neo4j://","neo4j+s://","bolt://","bolt+s://")))
          print("NEO4J_URI:", (uri[:40] + "...") if uri else "(missing)")
          sys.exit(0 if ok else 1)
          PY

      - name: Qdrant health
        run: |
          curl -fsS "${QDRANT_URL}/collections" >/dev/null

      - name: Kafka socket health
        run: |
          python - <<'PY'
          import os, socket, sys
          broker = os.getenv("KAFKA_BROKER","")
          if not broker:
              print("missing KAFKA_BROKER"); sys.exit(1)
          host, port = (broker, 9092)
          if ":" in broker:
              host, p = broker.split(":",1); port=int(p)
          s=socket.socket(); s.settimeout(3)
          try:
              s.connect((host,port)); print("Kafka OK"); sys.exit(0)
          except Exception as e:
              print("Kafka FAIL:", e); sys.exit(1)
          PY
name: pre-commit
on:
  pull_request:

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }
      - run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - run: pre-commit run --all-files
name: test

on:
  workflow_dispatch:
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -r requirements-dev.txt || true
          pip install pytest || true
      - name: pytest (placeholder)
        run: pytest -q || true
