name: deploy
'on':
  push:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/aurora-router:latest
  ACA_RG: aurora-rg
  ACA_ENV: aurora-env
  ACA_APP: aurora-router-app
  ACR_NAME: ghcr  # só rótulo; não usamos ACR
  GEMINI_API_URL: https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-latest:generateContent
  PRIMARY_MODEL_TIMEOUT_MS: "6000"

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: docker build -t $IMAGE_NAME ./aurora-router

      - name: Push image
        run: docker push $IMAGE_NAME

  deploy-aca:
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI - ensure Container App
        shell: bash
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} # injetado sem KV
        run: |
          set -euo pipefail

          az extension add --name containerapp --upgrade

          # cria env se não existir
          az containerapp env create \
            --name $ACA_ENV \
            --resource-group $ACA_RG \
            --location brazilsouth \
            --only-show-errors || true

          # cria app se não existir
          if ! az containerapp show -n $ACA_APP -g $ACA_RG >/dev/null 2>&1; then
            az containerapp create \
              -n $ACA_APP \
              -g $ACA_RG \
              --environment $ACA_ENV \
              --image $IMAGE_NAME \
              --ingress external --target-port 3000 \
              --min-replicas 0 --max-replicas 1 \
              --cpu 0.25 --memory 0.5Gi \
              --env-vars \
                SERVICE_NAME=aurora-router \
                PRIMARY_MODEL_TIMEOUT_MS=$PRIMARY_MODEL_TIMEOUT_MS \
                GEMINI_API_URL=$GEMINI_API_URL \
                GEMINI_API_KEY=$GEMINI_API_KEY
          else
            az containerapp update \
              -n $ACA_APP \
              -g $ACA_RG \
              --image $IMAGE_NAME \
              --set-env-vars \
                PRIMARY_MODEL_TIMEOUT_MS=$PRIMARY_MODEL_TIMEOUT_MS \
                GEMINI_API_URL=$GEMINI_API_URL \
                GEMINI_API_KEY=$GEMINI_API_KEY
          fi

          # health check básico via curl (retenta por cold start)
          FQDN=$(az containerapp show -n $ACA_APP -g $ACA_RG --query properties.configuration.ingress.fqdn -o tsv)
          for i in {1..12}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" -X POST "https://$FQDN/v1/complete" -H "Content-Type: application/json" --data '{"prompt":"<<TEXTO_AQUI>>"}' || true)
            if [ "$code" = "200" ] || [ "$code" = "502" ]; then echo "Router up ($code)"; exit 0; fi
            echo "waiting... ($i)"; sleep 5
          done
          echo "Router not responding in time"; exit 1
